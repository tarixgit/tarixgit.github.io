{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["d3","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSliderChange","event","selectedStep","setState","updateChart","ipnutData","outputData","hiddenLayerData","i","state","numberOfInputNeuron","push","x","y","numberOfOutputNeuron","hiddenLayers","currentLayer","j","div","select","refVis","append","attr","style","svg","viz","forEach","layerIndex","selectAll","data","enter","radius","d","on","transition","duration","html","pageX","pageY","accessorLayer","accessor","index","counter","width","height","_this2","classes","react_default","a","createElement","className","ref","onClick","Slider_default","container","slider","thumbIconWrapper","thumb","LensOutlined_default","color","value","min","max","step","onChange","Component","withStyles","root","padding","thumbIcon","borderRadius","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9ad094db.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport LensIcon from '@material-ui/icons/LensOutlined';\nimport { withStyles } from '@material-ui/core/styles';\nimport logo from './logo.svg';\nimport './App.css';\nconst d3 = require('d3');\n\nconst styles = {\n    root: {\n        width: 300,\n    },\n    slider: {\n        padding: '22px 0px',\n    },\n    thumbIcon: {\n        borderRadius: '50%',\n    },\n    thumbIconWrapper: {\n        backgroundColor: '#fff',\n        width: 'auto',\n        height: 'auto  '\n    },\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = {\n            counter: 0,\n            width: 960,\n            height: 400,\n            radius: 18,\n            numberOfInputNeuron: 8,\n            numberOfOutputNeuron: 8,\n            hiddenLayers: 1,\n            selectedStep: 0\n        };\n//        this.updateChart = this.updateChart.bind(this);\n    }\n    onSliderChange = (event, selectedStep) => {\n        this.setState({selectedStep});\n        return;\n    }\n    updateChart = () => {\n        // Define the div for the tooltip\n        const mschubY = 40;\n        const schubX = 240;\n        const firstXCoordinate = 60;\n        let ipnutData = [];\n        let outputData = [];\n        let hiddenLayerData = [];\n        //Daten vorbereiten\n        for (let i = 1; i <= this.state.numberOfInputNeuron; i++) {\n            ipnutData.push({\n                x: firstXCoordinate,\n                y: i * mschubY\n            })\n        }\n        for (let i = 1; i <= this.state.numberOfOutputNeuron; i++) {\n            outputData.push({\n                x: firstXCoordinate + ((this.state.hiddenLayers + 1) * schubX),\n                y: i * mschubY\n            })\n        }\n        hiddenLayerData.push(ipnutData);\n        for (let i = 1; i <= this.state.hiddenLayers; i++) {\n            const currentLayer = [];\n            for (let j = 1; j <= this.state.numberOfInputNeuron; j++) {\n                currentLayer.push({\n                    x: firstXCoordinate + (i * schubX),\n                    y: j * mschubY\n                })\n            }\n            hiddenLayerData.push(currentLayer);\n        }\n        hiddenLayerData.push(outputData);\n        const div = d3.select(this.refVis).append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"opacity\", 0);\n\n        const svg = d3.select(this.viz).append('svg');\n        hiddenLayerData.forEach((currentLayer, layerIndex) => {\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(currentLayer)\n                .enter()\n                .append(\"circle\")\n                .attr(\"r\", this.state.radius)\n                .attr(\"cx\", d => d.x)\n                .attr(\"cy\", d => d.y)\n                .on('mouseover', d => {\n                    div.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    div.html('Layer' + layerIndex + \"<br/>\" + d.x)\n                        .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 18) + \"px\");\n                }).on('mouseout', d => {\n                    div.transition()\n                     .duration(500)\n                     .style(\"opacity\", 0);\n                });\n        });\n        hiddenLayerData.forEach((currentLayer, layerIndex) => {\n            if (layerIndex == 0) {\n                return;\n            }\n            const accessorLayer = hiddenLayerData[layerIndex - 1];\n            const outspace = 1;\n            accessorLayer.forEach(accessor => {\n                svg.append(\"g\")\n                    .selectAll(\"line\")\n                    .data(currentLayer)\n                    .enter()\n                    .append(\"line\")\n                    .attr(\"stroke\", \"#b9baba\")\n                    .attr(\"stroke-width\", \"2.5\")\n                    .attr(\"x1\", (d, index) => accessor.x + this.state.radius + outspace)\n                    .attr(\"y1\", (d, index) => accessor.y)\n                    .attr(\"x2\", d => d.x - this.state.radius - outspace)\n                    .attr(\"y2\", d => d.y)\n\n            });\n        });\n    }\n\n    render() {\n        const styles = {\n            root: {\n                width: 300,\n            },\n            slider: {\n                padding: '22px 0px',\n            },\n        }\n        const {selectedStep} = this.state;\n        const { classes } = this.props;\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>\n                        Visualisation of neural network\n                    </p>\n                </header>\n                <div className='Main-container'>\n                    <div className='d3body'>\n                        <div ref={refVis => (this.refVis = refVis)}>\n                            <svg ref={viz => (this.viz = viz)}\n                                 width={this.state.width} height={this.state.height}/>\n                        </div>\n                    </div>\n                    <button onClick={this.updateChart}>update</button>\n                    <div className={styles.root}>\n                        <Slider\n                            classes={{\n                                container: classes.slider,\n                                thumbIconWrapper: classes.thumbIconWrapper,\n                            }}\n                            thumb={<LensIcon style={{ color: '#2196f3' }}/>}\n                            value={selectedStep}\n                            min={0}\n                            max={10}\n                            step={1}\n                            onChange={this.onSliderChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}